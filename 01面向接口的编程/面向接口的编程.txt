写在前面的
设计模式关注的是设计理念，并不是编程技巧。其实后面的编程实践中，用的比较多的也就是函数指针、函数指针结构体、链表、函数指针数组这些比较基本的概念
理念学会了，相同的编程思路可以原封不动的套用到其他编程语言上。所以不要觉得很简单，“不就用了个函数指针吗”、“不就是用了一个简单逻辑运算吗”，千万
不要有这种想法，那么反过来问一句：都是一些很简单的模块，我们为什么无法把他们组合成一个复杂的东西？
这种组合的过程，体现的就是设计模式
51单片机也可以做boot，C语言照样可以面向对象，理解了基础原理，其余的不过是工具
层次感
把一个复杂的工作分解成一个个简单逻辑模块，这也是计算机科学的魅力所在。一个很复杂的工作，通过设计模式-》编程语言-》操作系统-》编译过程-》门电路，最终变成了一个个简单的01运算
举几个例子，和我们相关的，已经实现的
1 DLMS脚本：通过脚本组合、权限组合、显示组合，把简单的DLMS属性组合起来，变成了复杂的DLMS规约
2 继电器逻辑脚本：把继电器的跳合闸元素（是否开盖？是否欠费），转换为独立的开关元素，用基本的与或非逻辑运算进行继电器动作判断（!开盖() 并且 !欠费()）-> 合闸
3 IEC1107和AT指令的正则化脚本：规约判断不变的地方是什么？是规约的指令格式，把指令格式提取出现，以正则表达式进行判断

以上例子，都体现了面向接口编程的一些原则，学完后大家可以回顾一下


高级语言的几个概念
类 接口
继承 实现
多态